name: Vertex Pipeline - Enroll & Recognize Check

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - master
      - develop
      - "codex/**"

permissions:
  id-token: write
  contents: read

env:
  PROJECT_ID: esp32cam-472912
  REGION: asia-east1
  SERVICE_URL: https://esp32-cam-jim-665759721336.asia-east1.run.app

  # TODO: 改成你實際路徑/桶名
  PIPELINE_DEF: pipelines/face_enroll_recognize.json
  PIPELINE_ROOT: gs://YOUR_PIPELINE_BUCKET/kfp-root
  GCS_INBOX: gs://YOUR_GCS_INBOX_BUCKET/new_photos

jobs:
  run-pipeline-and-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCP via OIDC
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Run Vertex Pipeline (enroll batch)
        shell: bash
        run: |
          set -euo pipefail
          gcloud ai pipeline-jobs create "enroll-$(date +%Y%m%d-%H%M%S)" \
            --region="${REGION}" \
            --pipeline-definition-file="${PIPELINE_DEF}" \
            --pipeline-root="${PIPELINE_ROOT}" \
            --display-name="Enroll Batch via CI" \
            --labels=ci=codex,stage=enroll \
            --format="value(name)"

      - name: Wait for enroll to finish
        shell: bash
        run: |
          set -euo pipefail
          JOB_ID=$(gcloud ai pipeline-jobs list --region="${REGION}" \
            --filter="labels.ci=codex AND labels.stage=enroll" --format="value(NAME)" | head -n1)
          echo "JOB_ID=$JOB_ID"
          gcloud ai pipeline-jobs wait "$JOB_ID" --region="${REGION}"

      - name: Upload a test photo to trigger Eventarc
        shell: bash
        run: |
          set -euo pipefail
          echo "Uploading test image to ${GCS_INBOX}..."
          gsutil cp samples/faces/personA/01.jpg "${GCS_INBOX%/}/ci_test_$(date +%s).jpg"

      - name: Probe Cloud Run /health
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${SERVICE_URL%/}/health"

      - name: Recognize via API (existing face)
        shell: bash
        run: |
          set -euo pipefail
          python3 -c "import base64,json,os,urllib.request
img='samples/faces/personA/02.jpg'
b64=base64.b64encode(open(img,'rb').read()).decode()
payload=json.dumps({'images':['data:image/jpeg;base64,'+b64],'purchase':'Milk'}).encode()
service_url=os.environ['SERVICE_URL'].rstrip('/')+'/detect_face'
req=urllib.request.Request(service_url,data=payload,headers={'Content-Type':'application/json'})
print(urllib.request.urlopen(req,timeout=60).read().decode())"

      - name: (Optional) Assert Firestore writes (visits increment)
        shell: bash
        run: |
          echo "若有 /debug 端點可在此查驗；否則改查雲端日誌或 Firestore。"
