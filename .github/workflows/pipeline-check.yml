name: Cloud - OIDC Face E2E + Summary

on:
  workflow_dispatch:
  push:
    branches: [ main, master, develop, 'codex/**' ]
  pull_request:

permissions:
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: esp32cam-472912
  REGION: asia-east1
  SERVICE_URL: ${{ vars.SERVICE_URL }}
  PIPELINE_DEF: ${{ vars.PIPELINE_DEF }}
  PIPELINE_ROOT: ${{ vars.PIPELINE_ROOT }}
  GCS_INBOX: ${{ vars.GCS_INBOX }}

jobs:
  run-pipeline-and-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCP via OIDC
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install tools
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl python3 coreutils

      - name: Init counters
        shell: bash
        run: |
          echo "FAILS=0" >> "$GITHUB_ENV"
          echo "RESULT_HEALTH=SKIPPED" >> "$GITHUB_ENV"
          echo "RESULT_ENROLL_A=SKIPPED" >> "$GITHUB_ENV"
          echo "RESULT_ENROLL_B=SKIPPED" >> "$GITHUB_ENV"
          echo "RESULT_RECOG_A=SKIPPED" >> "$GITHUB_ENV"

      - name: Sanity check env
        shell: bash
        run: |
          set -euo pipefail
          for v in SERVICE_URL PIPELINE_ROOT GCS_INBOX PIPELINE_DEF; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing variable: $v (set in Settings → Actions → Variables)"; exit 1;
            fi
          done
          if echo "${PIPELINE_DEF}" | grep -q '^gs://'; then
            gsutil ls "${PIPELINE_DEF}" >/dev/null 2>&1 || { echo "::error::Cannot access ${PIPELINE_DEF}"; exit 1; }
          else
            [ -f "${PIPELINE_DEF}" ] || { echo "::error::Missing file ${PIPELINE_DEF} in repo"; exit 1; }
          fi

      - name: Run Vertex Pipeline (enroll batch) - version compatible (optional)
        id: run_pipeline
        shell: bash
        run: |
          set -euo pipefail
          JOB_NAME=""
          if gcloud ai pipeline-jobs --help >/dev/null 2>&1; then
            JOB_NAME=$(gcloud ai pipeline-jobs create "enroll-$(date +%Y%m%d-%H%M%S)" \
              --region="${REGION}" \
              --pipeline-definition-file="${PIPELINE_DEF}" \
              --pipeline-root="${PIPELINE_ROOT}" \
              --display-name="Enroll Batch via CI" \
              --labels=ci=codex,stage=enroll \
              --format="value(name)" || true)
          elif gcloud beta ai pipeline-jobs --help >/dev/null 2>&1; then
            JOB_NAME=$(gcloud beta ai pipeline-jobs create "enroll-$(date +%Y%m%d-%H%M%S)" \
              --region="${REGION}" \
              --pipeline-definition-file="${PIPELINE_DEF}" \
              --pipeline-root="${PIPELINE_ROOT}" \
              --display-name="Enroll Batch via CI" \
              --labels=ci=codex,stage=enroll \
              --format="value(name)" || true)
          elif gcloud ai pipelines --help >/dev/null 2>&1; then
            OUT=$(gcloud ai pipelines run \
              --region="${REGION}" \
              --pipeline-definition-file="${PIPELINE_DEF}" \
              --pipeline-root="${PIPELINE_ROOT}" \
              --display-name="Enroll Batch via CI" \
              --labels=ci=codex,stage=enroll 2>&1 | tee /tmp/pipelines_run.out || true)
            JOB_NAME=$(grep -o 'projects/.*/locations/.*/pipelineJobs/[a-zA-Z0-9_-]*' /tmp/pipelines_run.out | head -n1 || true)
          fi
          echo "job_name=${JOB_NAME}" >> "$GITHUB_OUTPUT"
          if [ -n "${JOB_NAME}" ]; then
            echo "Submitted: ${JOB_NAME}"
          else
            echo "::notice::Vertex Pipelines command not available or submission skipped."
          fi

      - name: Wait for enroll to finish (if supported)
        if: ${{ steps.run_pipeline.outputs.job_name && steps.run_pipeline.outputs.job_name != '' }}
        shell: bash
        run: |
          set -euo pipefail
          JOB_NAME="${{ steps.run_pipeline.outputs.job_name }}"
          if gcloud ai pipeline-jobs --help >/dev/null 2>&1; then
            gcloud ai pipeline-jobs wait "${JOB_NAME}" --region="${REGION}"
          elif gcloud beta ai pipeline-jobs --help >/dev/null 2>&1; then
            gcloud beta ai pipeline-jobs wait "${JOB_NAME}" --region="${REGION}"
          else
            echo "::notice::No 'pipeline-jobs wait' available; continuing."
          fi

      - name: Probe Cloud Run /health
        shell: bash
        run: |
          set -euo pipefail
          URL="${SERVICE_URL%/}/health"
          echo "GET $URL"
          HTTP=$(curl -sS -o /tmp/health_noauth.out -w "%{http_code}" "$URL" || true)
          echo "HTTP(no-auth)=${HTTP}"
          if [ "${HTTP}" -ge 200 ] && [ "${HTTP}" -lt 300 ]; then
            echo "RESULT_HEALTH=PASS" >> "$GITHUB_ENV"
            cat /tmp/health_noauth.out || true
          else
            echo "---- body(no-auth) ----"; cat /tmp/health_noauth.out || true; echo "-----------------------"
            IDT=$(gcloud auth application-default print-identity-token --audiences="$URL")
            HTTP2=$(curl -sS -H "Authorization: Bearer ${IDT}" \
                       -o /tmp/health_auth.out -w "%{http_code}" "$URL" || true)
            echo "HTTP(auth)=${HTTP2}"
            echo "---- body(auth) ----"; cat /tmp/health_auth.out || true; echo "--------------------"
            if [ "${HTTP2}" -ge 200 ] && [ "${HTTP2}" -lt 300 ]; then
              echo "RESULT_HEALTH=PASS" >> "$GITHUB_ENV"
            else
              echo "RESULT_HEALTH=FAIL" >> "$GITHUB_ENV"
              echo "FAILS=$(( ${FAILS:-0} + 1 ))" >> "$GITHUB_ENV"
            fi
          fi

      - name: Smoke test - multi-person enroll and recognize
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p /tmp/faces/A /tmp/faces/B
          curl -fsSLo /tmp/faces/A/1.jpg https://vis-www.cs.umass.edu/lfw/images/George_W_Bush/George_W_Bush_0001.jpg
          curl -fsSLo /tmp/faces/A/2.jpg https://vis-www.cs.umass.edu/lfw/images/George_W_Bush/George_W_Bush_0002.jpg
          curl -fsSLo /tmp/faces/B/1.jpg https://vis-www.cs.umass.edu/lfw/images/Tony_Blair/Tony_Blair_0001.jpg

          b64() { base64 -w 0 "$1" 2>/dev/null || base64 "$1" | tr -d '\n'; }
          A1=$(b64 /tmp/faces/A/1.jpg)
          A2=$(b64 /tmp/faces/A/2.jpg)
          B1=$(b64 /tmp/faces/B/1.jpg)

          # Enroll A
          RES=$(curl -sS -w '\n%{http_code}' -X POST "${SERVICE_URL%/}/enroll" \
            -H 'Content-Type: application/json' \
            -d "{\"user_id\":\"test-A\",\"images\":[\"data:image/jpeg;base64,${A1}\",\"data:image/jpeg;base64,${A2}\"]}")
          CODE=$(echo "$RES" | tail -n1); BODY=$(echo "$RES" | sed '$d')
          if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
            echo "RESULT_ENROLL_A=PASS" >> "$GITHUB_ENV"
          else
            echo "RESULT_ENROLL_A=FAIL" >> "$GITHUB_ENV"; echo "$BODY"; echo "FAILS=$(( ${FAILS:-0} + 1 ))" >> "$GITHUB_ENV"
          fi

          # Enroll B
          RES=$(curl -sS -w '\n%{http_code}' -X POST "${SERVICE_URL%/}/enroll" \
            -H 'Content-Type: application/json' \
            -d "{\"user_id\":\"test-B\",\"images\":[\"data:image/jpeg;base64,${B1}\"]}")
          CODE=$(echo "$RES" | tail -n1); BODY=$(echo "$RES" | sed '$d')
          if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ]; then
            echo "RESULT_ENROLL_B=PASS" >> "$GITHUB_ENV"
          else
            echo "RESULT_ENROLL_B=FAIL" >> "$GITHUB_ENV"; echo "$BODY"; echo "FAILS=$(( ${FAILS:-0} + 1 ))" >> "$GITHUB_ENV"
          fi

          # Recognize A
          RES=$(curl -sS -w '\n%{http_code}' -X POST "${SERVICE_URL%/}/detect_face" \
            -H 'Content-Type: application/json' \
            -d "{\"images\":[\"data:image/jpeg;base64,${A1}\"],\"purchase\":\"Milk\"}")
          CODE=$(echo "$RES" | tail -n1); BODY=$(echo "$RES" | sed '$d')
          if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 300 ] \
             && echo "$BODY" | jq -e '.user_id=="test-A" or .match_user=="test-A" or .is_same_person==true' >/dev/null; then
            echo "RESULT_RECOG_A=PASS" >> "$GITHUB_ENV"
          else
            echo "RESULT_RECOG_A=FAIL" >> "$GITHUB_ENV"; echo "$BODY"; echo "FAILS=$(( ${FAILS:-0} + 1 ))" >> "$GITHUB_ENV"
          fi

      - name: Report summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          OVERALL="PASS"
          if [ "${FAILS:-0}" -gt 0 ]; then OVERALL="FAIL"; fi
          {
            echo "## Face E2E Result"
            echo ""
            echo "- Overall: **${OVERALL}**"
            echo "- /health: \`${RESULT_HEALTH}\`"
            echo "- Enroll A: \`${RESULT_ENROLL_A}\`"
            echo "- Enroll B: \`${RESULT_ENROLL_B}\`"
            echo "- Recognize A: \`${RESULT_RECOG_A}\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment on PR (if PR)
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fails = process.env.FAILS ? parseInt(process.env.FAILS, 10) : 0;
            const overall = fails > 0 ? '❌ FAIL' : '✅ PASS';
            const body = [
              `**Face E2E**: ${overall}`,
              `- /health: \`${process.env.RESULT_HEALTH}\``,
              `- Enroll A: \`${process.env.RESULT_ENROLL_A}\``,
              `- Enroll B: \`${process.env.RESULT_ENROLL_B}\``,
              `- Recognize A: \`${process.env.RESULT_RECOG_A}\``
            ].join('\n');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      - name: Fail job if any step failed
        if: ${{ always() }}
        shell: bash
        run: |
          test "${FAILS:-0}" -eq 0
