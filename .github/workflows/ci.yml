name: GCP CI

on:
  push:
    branches: ['**']
  pull_request:
  workflow_dispatch: {}

jobs:
  gcp-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      # ---- non-secret config: prefer Variables, fallback Secrets/defaults ----
      GCP_PROJECT: ${{ vars.GCP_PROJECT || secrets.GCP_PROJECT }}
      CLOUD_RUN_URL: ${{ vars.CLOUD_RUN_URL || secrets.CLOUD_RUN_URL }}
      CLOUD_RUN_HEALTH_PATH: ${{ vars.CLOUD_RUN_HEALTH_PATH || secrets.CLOUD_RUN_HEALTH_PATH || '/' }}
      CLOUD_RUN_DETECT_PATH: ${{ vars.CLOUD_RUN_DETECT_PATH || secrets.CLOUD_RUN_DETECT_PATH || '/detect_face' }}
      FIRESTORE_COLLECTION: ${{ vars.FIRESTORE_COLLECTION || secrets.FIRESTORE_COLLECTION || 'visitors' }}
      FIRESTORE_EVENTS_COLLECTION: ${{ vars.FIRESTORE_EVENTS_COLLECTION || secrets.FIRESTORE_EVENTS_COLLECTION || 'events' }}
      FIRESTORE_DATABASE_ID: ${{ vars.FIRESTORE_DATABASE_ID || secrets.FIRESTORE_DATABASE_ID || '(default)' }}

      # ---- embedding / batch 測試可調參數（都建議放 Variables）----
      ENABLE_EMBEDDING: ${{ vars.ENABLE_EMBEDDING || '1' }}
      SAMPLES_DIR: ${{ vars.SAMPLES_DIR || 'samples/faces/personA' }}
      N_IMAGES: ${{ vars.N_IMAGES || '0' }}                  # 0=全部
      THRESHOLD: ${{ vars.THRESHOLD || '0.8' }}              # 單張門檻
      TARGET_ACC: ${{ vars.TARGET_ACC || '0.8' }}            # 整體門檻
      BASELINE_INDEX: ${{ vars.BASELINE_INDEX || '-1' }}     # -1=自動找，或 0/1/2…
      USE_VISION: ${{ vars.USE_VISION || '1' }}              # 1=先用 Vision 裁臉，0=不裁

    steps:
      - uses: actions/checkout@v4

      - name: Write GCP service account key
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        shell: bash
        run: |
          if [ -z "$GCP_SA_KEY" ]; then
            echo "❌ Missing secret GCP_SA_KEY" >&2; exit 1
          fi
          printf '%s' "$GCP_SA_KEY' > "$RUNNER_TEMP/gcp-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/gcp-key.json" >> "$GITHUB_ENV"
          echo "✅ SA key written"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install base deps (Vision/Firestore/Auth/HTTP/Numpy)
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install "google-auth[requests]" google-cloud-vision google-cloud-firestore requests numpy

      - name: Install optional embedding deps (OpenCV + dlib + face_recognition)
        if: ${{ env.ENABLE_EMBEDDING == '1' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libgl1
          pip install pillow opencv-python dlib==19.24.4 face_recognition scikit-learn

      - name: Connectivity tests (Vision / Firestore / Cloud Run)
        if: ${{ hashFiles('scripts/gcp_connect_test.py') != '' }}
        run: python scripts/gcp_connect_test.py

      - name: ID batch test (5+ images via Vision+embedding)
        if: ${{ env.ENABLE_EMBEDDING == '1' && hashFiles('scripts/id_batch_test.py') != '' }}
        run: python scripts/id_batch_test.py

      - name: API latency test (/detect_face)
        if: ${{ env.ENABLE_EMBEDDING == '1' && hashFiles('scripts/post_detect_latency.py') != '' }}
        run: python scripts/post_detect_latency.py

      - name: Fallback copy (ensure id_test.log exists)
        shell: bash
        run: |
          if [ -f integrated_test.log ] && [ ! -f id_test.log ]; then
            cp integrated_test.log id_test.log
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gcp-logs
          path: |
            gcp_test.log
            vision_test.log
            firestore_test.log
            cloudrun_test.log
            integrated_test.log
            id_test.log
            api_test.log
          if-no-files-found: warn
