name: CI

on:
  push:
    branches:
      - main
      - master
      - develop
      - test
      - 'feature/**'
  pull_request: {}
  workflow_dispatch: {}

# 同一分支只保留最新一次執行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1) 本地 pytest
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found; skipping."
          fi
          pip install pytest

      - name: Detect tests
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          if ls -1 test*.py tests/*.py tests/**/*.py */test_*.py 2>/dev/null | head -n1 >/dev/null; then
            echo "has_tests=1" >> "$GITHUB_OUTPUT"
          else
            echo "has_tests=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Run pytest
        if: steps.detect.outputs.has_tests == '1'
        shell: bash
        run: |
          set -euo pipefail
          pytest --maxfail=1 --disable-warnings -q --ignore=scripts

      - name: Skip note (no tests found)
        if: steps.detect.outputs.has_tests != '1'
        shell: bash
        run: |
          echo "No test files detected; skipping pytest."

  # 2) GCP 端到端驗證（OIDC）
  pipeline-check:
    # 若希望部署前必須通過本地測試，解除下一行註解
    # needs: tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      id-token: write
      contents: read

    env:
      PROJECT_ID: esp32cam-472912
      REGION: asia-east1
      SERVICE_URL: https://esp32-cam-jim-665759721336.asia-east1.run.app
      PIPELINE_DEF: pipelines/face_enroll_recognize.json
      PIPELINE_ROOT: gs://YOUR_PIPELINE_BUCKET/kfp-root
      GCS_INBOX: gs://YOUR_GCS_INBOX_BUCKET/new_photos

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCP via OIDC
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install tools
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl python3 coreutils

      - name: Sanity check vars
        shell: bash
        run: |
          set -euo pipefail
          echo "PROJECT_ID=${PROJECT_ID}"
          echo "REGION=${REGION}"
          echo "SERVICE_URL=${SERVICE_URL}"
          echo "PIPELINE_DEF=${PIPELINE_DEF}"
          echo "PIPELINE_ROOT=${PIPELINE_ROOT}"
          echo "GCS_INBOX=${GCS_INBOX}"
          test -f "${PIPELINE_DEF}" || { echo "Missing ${PIPELINE_DEF}"; exit 1; }

      - name: Run Vertex Pipeline (enroll batch)
        shell: bash
        run: |
          set -euo pipefail
          gcloud ai pipeline-jobs create "enroll-$(date +%Y%m%d-%H%M%S)" \
            --region="${REGION}" \
            --pipeline-definition-file="${PIPELINE_DEF}" \
            --pipeline-root="${PIPELINE_ROOT}" \
            --display-name="Enroll Batch via CI" \
            --labels=ci=codex,stage=enroll \
            --format="value(name)"

      - name: Wait for enroll to finish
        shell: bash
        run: |
          set -euo pipefail
          JOB_ID=$(gcloud ai pipeline-jobs list --region="${REGION}" \
            --filter="labels.ci=codex AND labels.stage=enroll" --format="value(NAME)" | head -n1)
          echo "JOB_ID=$JOB_ID"
          gcloud ai pipeline-jobs wait "$JOB_ID" --region="${REGION}"

      - name: Upload a test photo to trigger Eventarc
        shell: bash
        run: |
          set -euo pipefail
          echo "Uploading test image to ${GCS_INBOX}..."
          if [ -f samples/faces/personA/01.jpg ]; then
            gsutil cp samples/faces/personA/01.jpg "${GCS_INBOX%/}/ci_test_$(date +%s).jpg"
          else
            dd if=/dev/urandom bs=1024 count=8 of=/tmp/placeholder.jpg >/dev/null 2>&1
            gsutil cp /tmp/placeholder.jpg "${GCS_INBOX%/}/ci_placeholder_$(date +%s).jpg"
          fi

      - name: Probe Cloud Run /health
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${SERVICE_URL%/}/health" || { echo "/health failed"; exit 1; }

      - name: Recognize via API (existing face)
        shell: bash
        run: |
          set -euo pipefail
          IMG=/tmp/ci_face.jpg
          mkdir -p /tmp
          curl -fsSLo "$IMG" https://vis-www.cs.umass.edu/lfw/images/George_W_Bush/George_W_Bush_0001.jpg
          B64=$(base64 -w 0 "$IMG")
          printf '{"images":["data:image/jpeg;base64,%s"],"purchase":"Milk"}' "$B64" > /tmp/payload.json
          RES=$(curl -sS -w '\n%{http_code}' -X POST "${SERVICE_URL%/}/detect_face" \
            -H 'Content-Type: application/json' --data-binary @/tmp/payload.json)
          CODE=$(echo "$RES" | tail -n1)
          BODY=$(echo "$RES" | sed '$d')
          echo "$BODY" | jq .
          test "$CODE" -ge 200 -a "$CODE" -lt 300 || { echo "HTTP $CODE"; exit 1; }

      - name: Upload run artifacts (logs, if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-check-artifacts
          path: |
            **/*.log
          if-no-files-found: ignore
