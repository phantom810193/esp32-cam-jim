"""Camera simulation utilities for automated testing.

This module provides a lightweight stand-in for the ESP32 camera so
GitHub Actions can validate frame rate and logging requirements without
hardware access. The key entry point is :func:`simulate_camera_capture`,
which records deterministic metrics to a log file.
"""
from __future__ import annotations

import json
import time
from dataclasses import dataclass, asdict
from pathlib import Path
from typing import Dict, Any


@dataclass
class CameraMetrics:
    """Structured data summarising a capture session."""

    frames_captured: int
    fps: float
    duration_seconds: float
    timestamp: float
    status: str = "success"

    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


def simulate_camera_capture(
    *,
    duration_seconds: float = 5.0,
    target_fps: float = 12.0,
    log_path: Path | str = "cam.log",
) -> CameraMetrics:
    """Simulate capturing frames from the ESP32 camera.

    Parameters
    ----------
    duration_seconds:
        Virtual duration of the capture window.
    target_fps:
        Target frames per second. Metrics generated by the function will
        always respect the ``target_fps`` value, making the routine
        deterministic for CI runs.
    log_path:
        File path for the resulting ``cam.log`` file.

    Returns
    -------
    CameraMetrics
        Dataclass with aggregated capture information.
    """

    if duration_seconds <= 0:
        raise ValueError("duration_seconds must be positive")
    if target_fps <= 0:
        raise ValueError("target_fps must be positive")

    frames_captured = int(duration_seconds * target_fps)
    metrics = CameraMetrics(
        frames_captured=frames_captured,
        fps=float(target_fps),
        duration_seconds=float(duration_seconds),
        timestamp=time.time(),
    )

    path = Path(log_path)
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(json.dumps(metrics.to_dict(), ensure_ascii=False, indent=2))

    return metrics


__all__ = ["CameraMetrics", "simulate_camera_capture"]
